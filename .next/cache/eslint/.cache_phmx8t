[{"C:\\Users\\dhira\\Desktop\\SUS\\pb08waleETHFORALL\\pages\\api\\secure.js":"1","C:\\Users\\dhira\\Desktop\\SUS\\pb08waleETHFORALL\\pages\\create-nft.jsx":"2","C:\\Users\\dhira\\Desktop\\SUS\\pb08waleETHFORALL\\pages\\index.jsx":"3","C:\\Users\\dhira\\Desktop\\SUS\\pb08waleETHFORALL\\pages\\listed-nfts.jsx":"4","C:\\Users\\dhira\\Desktop\\SUS\\pb08waleETHFORALL\\pages\\my-nfts.jsx":"5","C:\\Users\\dhira\\Desktop\\SUS\\pb08waleETHFORALL\\pages\\nft-details.jsx":"6","C:\\Users\\dhira\\Desktop\\SUS\\pb08waleETHFORALL\\pages\\resell-nft.jsx":"7","C:\\Users\\dhira\\Desktop\\SUS\\pb08waleETHFORALL\\pages\\_app.jsx":"8","C:\\Users\\dhira\\Desktop\\SUS\\pb08waleETHFORALL\\components\\Banner.jsx":"9","C:\\Users\\dhira\\Desktop\\SUS\\pb08waleETHFORALL\\components\\Button.jsx":"10","C:\\Users\\dhira\\Desktop\\SUS\\pb08waleETHFORALL\\components\\CreatorCard.jsx":"11","C:\\Users\\dhira\\Desktop\\SUS\\pb08waleETHFORALL\\components\\Footer.jsx":"12","C:\\Users\\dhira\\Desktop\\SUS\\pb08waleETHFORALL\\components\\index.js":"13","C:\\Users\\dhira\\Desktop\\SUS\\pb08waleETHFORALL\\components\\Input.jsx":"14","C:\\Users\\dhira\\Desktop\\SUS\\pb08waleETHFORALL\\components\\Loader.jsx":"15","C:\\Users\\dhira\\Desktop\\SUS\\pb08waleETHFORALL\\components\\Modal.jsx":"16","C:\\Users\\dhira\\Desktop\\SUS\\pb08waleETHFORALL\\components\\Navbar.jsx":"17","C:\\Users\\dhira\\Desktop\\SUS\\pb08waleETHFORALL\\components\\NFTCard.jsx":"18","C:\\Users\\dhira\\Desktop\\SUS\\pb08waleETHFORALL\\components\\SearchBar.jsx":"19"},{"size":316,"mtime":1682098905879,"results":"20","hashOfConfig":"21"},{"size":4238,"mtime":1682098905879,"results":"22","hashOfConfig":"21"},{"size":7407,"mtime":1682098905879,"results":"23","hashOfConfig":"21"},{"size":1527,"mtime":1682098905879,"results":"24","hashOfConfig":"21"},{"size":3486,"mtime":1682098905879,"results":"25","hashOfConfig":"21"},{"size":8296,"mtime":1682098905879,"results":"26","hashOfConfig":"21"},{"size":1796,"mtime":1682098905879,"results":"27","hashOfConfig":"21"},{"size":705,"mtime":1682098905879,"results":"28","hashOfConfig":"21"},{"size":561,"mtime":1682098905865,"results":"29","hashOfConfig":"21"},{"size":282,"mtime":1682098905865,"results":"30","hashOfConfig":"21"},{"size":1786,"mtime":1682098905865,"results":"31","hashOfConfig":"21"},{"size":3728,"mtime":1682098905865,"results":"32","hashOfConfig":"21"},{"size":467,"mtime":1682098905865,"results":"33","hashOfConfig":"21"},{"size":1754,"mtime":1682098905865,"results":"34","hashOfConfig":"21"},{"size":258,"mtime":1682098905865,"results":"35","hashOfConfig":"21"},{"size":1445,"mtime":1682098905865,"results":"36","hashOfConfig":"21"},{"size":6453,"mtime":1682098905865,"results":"37","hashOfConfig":"21"},{"size":1736,"mtime":1682098905865,"results":"38","hashOfConfig":"21"},{"size":2746,"mtime":1682098905865,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},"xbs49c",{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95"},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99"},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103"},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107"},"C:\\Users\\dhira\\Desktop\\SUS\\pb08waleETHFORALL\\pages\\api\\secure.js",["108"],[],"import { Buffer } from 'buffer';\r\n\r\nexport default async (req, res) => {\r\n  const projectId = process.env.IPFS_PROJECT_ID;\r\n  const projectSecret = process.env.API_KEY_SECRET;\r\n  const auth = `Basic ${Buffer.from(`${projectId}:${projectSecret}`).toString('base64')}`;\r\n\r\n  res.status(200).json({ data: auth });\r\n};\r\n","C:\\Users\\dhira\\Desktop\\SUS\\pb08waleETHFORALL\\pages\\create-nft.jsx",["109","110"],[],"import React, { useState, useMemo, useCallback, useContext } from 'react';\r\n\r\nimport { useRouter } from 'next/router';\r\nimport { useDropzone } from 'react-dropzone';\r\nimport Image from 'next/image';\r\nimport { useTheme } from 'next-themes';\r\n\r\nimport { NFTContext } from '../context/NFTContext';\r\nimport { Button, Input, Loader } from '../components';\r\nimport images from '../assets';\r\n\r\nconst CreateNFTPage = () => {\r\n  const [fileUrl, setFileUrl] = useState(null);\r\n\r\n  const [formInput, setFormInput] = useState({ price: '', name: '', description: '' });\r\n\r\n  const { theme } = useTheme();\r\n  const { isLoadingNFT, uploadToIPFS, CreateNFT } = useContext(NFTContext);\r\n  const router = useRouter();\r\n\r\n  const onDrop = useCallback(async (acceptedFile) => {\r\n    const url = await uploadToIPFS(acceptedFile[0]);\r\n    console.log('url', url);\r\n    setFileUrl(url);\r\n  }, []);\r\n\r\n  const { getRootProps, getInputProps, isDragActive, isDragAccept, isDragReject } = useDropzone({\r\n    onDrop,\r\n    accept: 'image/*',\r\n    maxSize: 5000000,\r\n  });\r\n\r\n  const fileStyle = useMemo(() => (\r\n    `dark:bg-nft-black-1 bg-white border dark:border-white border-nft-gray-2 flex flex-col items-center p-5 rounded-sm border-dashed\r\n    ${isDragActive && 'border-file-active'}\r\n    ${isDragAccept && 'border-file-accept'}\r\n    ${isDragReject && 'border-file-reject'}\r\n    `\r\n  ), [isDragActive, isDragAccept, isDragReject]);\r\n  console.log(formInput);\r\n\r\n  if (isLoadingNFT) {\r\n    return (\r\n      <div className=\"flexStart min-h-screen\">\r\n        <Loader />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex justify-center sm:px-4 p-12\">\r\n      <div className=\"w-3/5 md:w-full\">\r\n        <h1 className=\"flex-1 font-poppins dark:text-white text-nft-black-1 text-2xl minlg:text-4xl font-semibold sm:mb-4\">Create New NFT</h1>\r\n        <div className=\"mt-16 \">\r\n          <p className=\"flex-1 font-poppins dark:text-white text-nft-black-1 font-semibold text-xl\">Upload File</p>\r\n          <div className=\"mt-4\">\r\n            <div {...getRootProps()} className={fileStyle}>\r\n              <input {...getInputProps()} type=\"text\" />\r\n              <div className=\"flexCenter flex-col text-center\">\r\n                <p className=\"flex-1 font-poppins dark:text-white text-nft-black-1 font-semibold text-xl\">JPG, PNG, GIF, SVG, WEBM. Max 100mb.</p>\r\n                <div className=\"my-12 w-full flex justify-center\">\r\n                  <Image\r\n                    src={images.upload}\r\n                    width={100}\r\n                    height={100}\r\n                    objectFit=\"contain\"\r\n                    alt=\"file Upload\"\r\n                    className={theme === 'light' ? 'filter invert' : undefined}\r\n                  />\r\n                </div>\r\n                <p className=\"flex-1 font-poppins dark:text-white text-nft-black-1 font-semibold text-sm\">Drag and Drop File</p>\r\n                <p className=\"flex-1 font-poppins dark:text-white text-nft-black-1 font-semibold text-sm\">or Browse media on your device</p>\r\n              </div>\r\n            </div>\r\n            {fileUrl && (\r\n              <aside>\r\n                <div>\r\n                  <img src={fileUrl} alt=\"asset file\" />\r\n                </div>\r\n              </aside>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <Input\r\n          inputType=\"input\"\r\n          title=\"Name\"\r\n          placeHolder=\"NFT name\"\r\n          handleClick={(e) => setFormInput({ ...formInput, name: e.target.value })}\r\n        />\r\n        <Input\r\n          inputType=\"textarea\"\r\n          title=\"Descripton\"\r\n          placeHolder=\"NFT Descripton\"\r\n          handleClick={(e) => setFormInput({ ...formInput, description: e.target.value })}\r\n        />\r\n        <Input\r\n          inputType=\"number\"\r\n          title=\"Price\"\r\n          placeHolder=\"NFT Price\"\r\n          handleClick={(e) => setFormInput({ ...formInput, price: e.target.value })}\r\n        />\r\n        <div className=\"mt-7 w-full flex justify-end\">\r\n          <Button\r\n            btnName=\"Create NFT\"\r\n            classStyles=\"rounded-xl\"\r\n            handleClick={() => CreateNFT(formInput, fileUrl, router)}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreateNFTPage;\r\n","C:\\Users\\dhira\\Desktop\\SUS\\pb08waleETHFORALL\\pages\\index.jsx",["111","112"],[],"import { useEffect, useRef, useState, useContext } from 'react';\r\n\r\nimport Image from 'next/image';\r\nimport { useTheme } from 'next-themes';\r\n\r\nimport { NFTContext } from '../context/NFTContext';\r\nimport { Banner, CreatorCard, Loader, NFTCard, SearchBar } from '../components';\r\nimport images from '../assets';\r\nimport { shortenAddress } from '../utils/shortenAddress';\r\nimport { getTopCreators } from '../utils/getTopCreators';\r\n\r\nconst Home = () => {\r\n  const [hideButtons, setHideButtons] = useState(false);\r\n  const [nfts, setNfts] = useState([]);\r\n  const [nftsCopy, setNftsCopy] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const { fetchNFTs } = useContext(NFTContext);\r\n  const [activeSelect, setActiveSelect] = useState('Recently added');\r\n  const parentRef = useRef(null);\r\n  const scrollRef = useRef(null);\r\n  const { theme } = useTheme();\r\n  const handleScroll = (direction) => {\r\n    const { current } = scrollRef;\r\n    const scrollAmount = window.innerWidth > 1000 ? 270 : 210;\r\n    if (direction === 'left') {\r\n      current.scrollLeft -= scrollAmount;\r\n    } else {\r\n      current.scrollLeft += scrollAmount;\r\n    }\r\n  };\r\n\r\n  const isScrollable = () => {\r\n    const { current } = scrollRef;\r\n    const { current: parent } = parentRef;\r\n    if (current?.scrollWidth >= parent?.offsetWidth) {\r\n      setHideButtons(false);\r\n    } else {\r\n      setHideButtons(true);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    fetchNFTs().then((items) => {\r\n      setNfts(items);\r\n      setNftsCopy(items);\r\n      setIsLoading(false);\r\n      console.log(items);\r\n    });\r\n  }, []);\r\n  useEffect(() => {\r\n    const sortedNfts = [...nfts];\r\n\r\n    switch (activeSelect) {\r\n      case 'Price (low to high)':\r\n        setNfts(sortedNfts.sort((a, b) => a.price - b.price));\r\n        break;\r\n      case 'Price (high to low)':\r\n        setNfts(sortedNfts.sort((a, b) => b.price - a.price));\r\n        break;\r\n      case 'Recently added':\r\n        setNfts(sortedNfts.sort((a, b) => b.tokenId - a.tokenId));\r\n        break;\r\n      default:\r\n        setNfts(nfts);\r\n        break;\r\n    }\r\n  }, [activeSelect]);\r\n\r\n  const onHandleSearch = (value) => {\r\n    const filteredNfts = nfts.filter(({ name }) => name.toLowerCase().includes(value.toLowerCase()));\r\n\r\n    if (filteredNfts.length) {\r\n      setNfts(filteredNfts);\r\n    } else {\r\n      setNfts(nftsCopy);\r\n    }\r\n  };\r\n\r\n  const onClearSearch = () => {\r\n    if (nfts.length && nftsCopy.length) {\r\n      setNfts(nftsCopy);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    isScrollable();\r\n    window.addEventListener('resize', isScrollable);\r\n\r\n    return () => {\r\n      window.removeEventListener('resize', isScrollable);\r\n    };\r\n  });\r\n  const creators = getTopCreators(nftsCopy);\r\n  console.log(creators);\r\n  return (\r\n    <div className=\"flex justify-center ms:px-4 p-12\">\r\n      <div className=\"w-full minmd:w-4/5\">\r\n        <Banner\r\n          name={(\r\n            <>\r\n              Discover, collect, and sell <br /> extraordinary NFTs\r\n            </>\r\n          )}\r\n          parentStyles=\"justify-start mb-6 h-72 sm:h-60 p-12 xs:p-4 xs:h-44 rounded-3xl\"\r\n          childStyles=\"md:text-4xl sm:text-2xl xs:text-xl text-left\"\r\n        />\r\n        {!isLoading && !nfts.length ? (\r\n          <h1 className=\"font-poppins dark:text-white text-nft-black-1 text-2xl minlg:text-4xl font-semibold ml-4 xs:ml-0\">That&apos;s Weird... NO NFts Found</h1>\r\n        ) : isLoading ? (\r\n          <Loader />\r\n        ) : (\r\n          <>\r\n            <div>\r\n              <h1 className=\"font-poppins dark:text-white text-nft-black-1 text-2xl minlg:text-4xl font-semibold ml-4 xs:ml-0\">\r\n                Top Sellers\r\n              </h1>\r\n              <div\r\n                className=\"relative flex-1 max-w-full flex mt-3\"\r\n                ref={parentRef}\r\n              >\r\n                <div\r\n                  className=\"flex flex-row w-max overflow-x-scroll no-scrollbar select-none\"\r\n                  ref={scrollRef}\r\n                >\r\n                  {creators.sort((a, b) => b.sumall - a.sumall).map((creator, i) => (\r\n                    <CreatorCard\r\n                      key={creator.seller}\r\n                      rank={i + 1}\r\n                      creatorImage={images[`creator${i + 1}`]}\r\n                      creatorName={shortenAddress(creator.seller)}\r\n                      creatorEths={creator.sumall}\r\n                    />\r\n                  )).slice(0, 8)}\r\n                  {!hideButtons && (\r\n                    <>\r\n                      <div\r\n                        onClick={() => handleScroll('left')}\r\n                        className=\"absolute w-8 h-8 minlg:w-12 minlg:h-12 top-45 cursor-pointer left-0\"\r\n                      >\r\n                        <Image\r\n                          src={images.left}\r\n                          layout=\"fill\"\r\n                          objectFit=\"contain\"\r\n                          alt=\"left-arrow\"\r\n                          className={\r\n                            theme === 'light' ? 'filter invert' : undefined\r\n                          }\r\n                        />\r\n                      </div>\r\n                      <div\r\n                        onClick={() => handleScroll('right')}\r\n                        className=\"absolute w-8 h-8 minlg:w-12 minlg:h-12 top-45 cursor-pointer right-0\"\r\n                      >\r\n                        <Image\r\n                          src={images.right}\r\n                          layout=\"fill\"\r\n                          objectFit=\"contain\"\r\n                          alt=\"left-arrow\"\r\n                          className={\r\n                            theme === 'light' ? 'filter invert' : undefined\r\n                          }\r\n                        />\r\n                      </div>\r\n                    </>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"mt-10\">\r\n              <div className=\"flexBetween mx-4 xs:mx-0 minlg:mx-8 sm:flex-col sm:items-start\">\r\n                <h1 className=\"flex-1 font-poppins dark:text-white text-nft-black-1 text-2xl minlg:text-4xl font-semibold sm:mb-4\">\r\n                  Hot NFTs\r\n                </h1>\r\n                <div className=\"flex-2 sm:w-full flex flex-row sm:flex-col\">\r\n                  <SearchBar\r\n                    activeSelect={activeSelect}\r\n                    setActiveSelect={setActiveSelect}\r\n                    handleSearch={onHandleSearch}\r\n                    clearSearch={onClearSearch}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\"mt-3 w-full flex flex-wrap justify-start md:justify-center\">\r\n                {nfts.map((nft) => (\r\n                  <NFTCard key={nft.tokenId} nft={nft} />\r\n                ))}\r\n                {/* {[1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map((i) => (\r\n              <NFTCard\r\n                key={`nft-${i}`}\r\n                nft={{\r\n                  i,\r\n                  name: `Nifty NFT ${i}`,\r\n                  price: (10 - i * 0.536).toFixed(2),\r\n                  seller: `0x${makeId(3)}...${makeId(4)}`,\r\n                  owner: `0x${makeId(3)}...${makeId(4)}`,\r\n                  description: 'Cool NFT on Sale',\r\n                }}\r\n              />\r\n            ))} */}\r\n              </div>\r\n            </div>\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","C:\\Users\\dhira\\Desktop\\SUS\\pb08waleETHFORALL\\pages\\listed-nfts.jsx",["113"],[],"import { useState, useEffect, useContext } from 'react';\r\n\r\nimport { NFTContext } from '../context/NFTContext';\r\nimport { Loader, NFTCard } from '../components';\r\n\r\nconst ListedNFTs = () => {\r\n  const [nfts, setNfts] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const { fetchMyNFTsOrListedNFTs } = useContext(NFTContext);\r\n\r\n  useEffect(() => {\r\n    fetchMyNFTsOrListedNFTs('fetchItemsListed').then((items) => {\r\n      setNfts(items);\r\n      console.log(items);\r\n      setIsLoading(false);\r\n    });\r\n  }, []);\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"flexStart min-h-screen\">\r\n        <Loader />\r\n      </div>\r\n    );\r\n  }\r\n  if (!isLoading && nfts.length === 0) {\r\n    return (\r\n      <div className=\"flexCenter sm:p-4 p-16 min-h-screen\">\r\n        <h1 className=\"font-poppins dark:text-white text-nft-black-1 text-3xl font-extrabold \">\r\n          NO NFTs Listed For Sale\r\n        </h1>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div className=\"flex justify-center sm:px-4 p-12 min-h-screen\">\r\n      <div className=\"w-full minmd:w-4/5\">\r\n        <div className=\"mt-4\">\r\n          <h2 className=\"font-poppins dark:text-white text-nft-black-1 text-2xl font-semibold ml-4 sm:ml-2\">Listed for Sale</h2>\r\n          <div className=\"mt-3 w-full flex flex-wrap justify-start md:justify-center\">\r\n            {nfts.map((nft) => <NFTCard key={nft.tokenId} nft={nft} />)}\r\n\r\n          </div>\r\n        </div>\r\n      </div>\r\n      ListedNFTs\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ListedNFTs;\r\n","C:\\Users\\dhira\\Desktop\\SUS\\pb08waleETHFORALL\\pages\\my-nfts.jsx",["114","115","116"],[],"import { useState, useEffect, useContext } from 'react';\r\nimport Image from 'next/image';\r\n\r\nimport { NFTContext } from '../context/NFTContext';\r\nimport { Loader, NFTCard, Banner, SearchBar } from '../components';\r\nimport images from '../assets';\r\nimport { shortenAddress } from '../utils/shortenAddress';\r\n\r\nconst MyNFTs = () => {\r\n  const { fetchMyNFTsOrListedNFTs, currentAccount } = useContext(NFTContext);\r\n  const [nfts, setNfts] = useState([]);\r\n  const [nftsCopy, setNftsCopy] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [activeSelect, setActiveSelect] = useState('Recently added');\r\n\r\n  useEffect(() => {\r\n    fetchMyNFTsOrListedNFTs()\r\n      .then((items) => {\r\n        setNfts(items);\r\n        setNftsCopy(items);\r\n        setIsLoading(false);\r\n      });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const sortedNfts = [...nfts];\r\n\r\n    switch (activeSelect) {\r\n      case 'Price (low to high)':\r\n        setNfts(sortedNfts.sort((a, b) => a.price - b.price));\r\n        break;\r\n      case 'Price (high to low)':\r\n        setNfts(sortedNfts.sort((a, b) => b.price - a.price));\r\n        break;\r\n      case 'Recently added':\r\n        setNfts(sortedNfts.sort((a, b) => b.tokenId - a.tokenId));\r\n        break;\r\n      default:\r\n        setNfts(nfts);\r\n        break;\r\n    }\r\n  }, [activeSelect]);\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"flexStart min-h-screen\">\r\n        <Loader />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const onHandleSearch = (value) => {\r\n    const filteredNfts = nfts.filter(({ name }) => name.toLowerCase().includes(value.toLowerCase()));\r\n\r\n    if (filteredNfts.length) {\r\n      setNfts(filteredNfts);\r\n    } else {\r\n      setNfts(nftsCopy);\r\n    }\r\n  };\r\n\r\n  const onClearSearch = () => {\r\n    if (nfts.length && nftsCopy.length) {\r\n      setNfts(nftsCopy);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-full flex justify-start items-center flex-col min-h-screen\">\r\n      <div className=\"w-full flexCenter flex-col\">\r\n        <Banner\r\n          name=\"Your Nifty NFTs\"\r\n          childStyles=\"text-center mb-4\"\r\n          parentStyles=\"h-80 justify-center\"\r\n        />\r\n\r\n        <div className=\"flexCenter flex-col -mt-20 z-0\">\r\n          <div className=\"flexCenter w-40 h-40 sm:w-36 sm:h-36 p-1 bg-nft-black-2 rounded-full\">\r\n            <Image src={images.creator1} className=\"rounded-full object-cover\" objectFit=\"cover\" />\r\n          </div>\r\n          <p className=\"font-poppins dark:text-white text-nft-black-1 font-semibold text-2xl mt-6\">{shortenAddress(currentAccount)}</p>\r\n        </div>\r\n      </div>\r\n\r\n      {!isLoading && !nfts.length && !nftsCopy.length ? (\r\n        <div className=\"flexCenter sm:p-4 p-16\">\r\n          <h1 className=\"font-poppins dark:text-white text-nft-black-1 font-extrabold text-3xl\">No NFTs Owned</h1>\r\n        </div>\r\n      ) : (\r\n        <div className=\"sm:px-4 p-12 w-full minmd:w-4/5 flexCenter flex-col\">\r\n          <div className=\"flex-1 w-full flex flex-row sm:flex-col px-4 xs:px-0 minlg:px-8\">\r\n            <SearchBar\r\n              activeSelect={activeSelect}\r\n              setActiveSelect={setActiveSelect}\r\n              handleSearch={onHandleSearch}\r\n              clearSearch={onClearSearch}\r\n            />\r\n          </div>\r\n          <div className=\"mt-3 w-full flex flex-wrap\">\r\n            {nfts.map((nft) => <NFTCard key={nft.token} nft={nft} onProfilePage />)}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MyNFTs;\r\n","C:\\Users\\dhira\\Desktop\\SUS\\pb08waleETHFORALL\\pages\\nft-details.jsx",["117","118","119","120","121"],[],"import { useState, useEffect, useContext } from 'react';\r\nimport Image from 'next/image';\r\nimport { useRouter } from 'next/router';\r\n\r\nimport { NFTContext } from '../context/NFTContext';\r\nimport { Loader, Button, Modal } from '../components';\r\n\r\nimport images from '../assets';\r\nimport { shortenAddress } from '../utils/shortenAddress';\r\n\r\nconst PaymentBodyCmp = ({ nft, nftCurrency }) => (\r\n  <div className=\"flex flex-col\">\r\n    <div className=\"flexBetween\">\r\n      <p className=\"font-poppins dark:text-white text-nft-black-1 minlg:text-xl text-base font-semibold \">\r\n        Items\r\n      </p>\r\n      <p className=\"font-poppins dark:text-white text-nft-black-1 minlg:text-xl text-base font-semibold \">\r\n        Subtotal\r\n      </p>\r\n    </div>\r\n    <div className=\"flexBetweenStart my-5\">\r\n      <div className=\"flex-1 flexStartCenter\">\r\n        <div className=\"relative w-28 h-28\">\r\n          <Image src={nft.image} layout=\"fill\" objectFit=\"cover\" />\r\n        </div>\r\n        <div className=\"flexCenterStart ml-5 flex-col\">\r\n          <p className=\"font-poppins dark:text-white text-nft-black-1 font-semibold  text-sm minlg:text-xl\">\r\n            {shortenAddress(nft.seller)}\r\n          </p>\r\n          <p className=\"font-poppins dark:text-white text-nft-black-1 font-semibold  text-sm minlg:text-xl\">\r\n            {nft.name}\r\n          </p>\r\n        </div>\r\n      </div>\r\n      <div>\r\n        <p className=\"font-poppins dark:text-white text-nft-black-1 font-normal  text-sm minlg:text-xl\">\r\n          {nft.price} <span className=\"font-semibold\">{nftCurrency}</span>\r\n        </p>\r\n      </div>\r\n    </div>\r\n    <div className=\"flexBetween mt-10\">\r\n      <p className=\"font-poppins dark:text-white text-nft-black-1 font-normal  text-base minlg:text-xl\">\r\n        Total\r\n      </p>\r\n      <p className=\"font-poppins dark:text-white text-nft-black-1 font-normal  text-sm minlg:text-xl\">\r\n        {nft.price} <span className=\"font-semibold\">{nftCurrency}</span>\r\n      </p>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nconst NFTDetails = () => {\r\n  const { isLoadingNFT, currentAccount, nftCurrency, buyNft } = useContext(NFTContext);\r\n  const [nft, setNft] = useState({\r\n    image: '',\r\n    tokenId: '',\r\n    name: '',\r\n    owner: '',\r\n    price: '',\r\n    seller: '',\r\n  });\r\n  const router = useRouter();\r\n  const [paymentModal, setPaymentModal] = useState(false);\r\n  const [successModal, setSuccessModal] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    if (!router.isReady) return;\r\n    setNft(router.query);\r\n    setIsLoading(false);\r\n  }, [router.isReady]);\r\n\r\n  const checkout = async () => {\r\n    await buyNft(nft);\r\n\r\n    setPaymentModal(false);\r\n    setSuccessModal(true);\r\n  };\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"flexStart min-h-screen\">\r\n        <Loader />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"relative flex justify-center md:flex-col min-h-screen \">\r\n      <div className=\"relative flex-1 flexCenter sm:px-4 p-12 border-r md:border-r-0 md:border-b dark:border-nft-black-1 border-nft-gray-1 \">\r\n        <div className=\"relative w-557 minmd:w-2/3 sm:w-full sm:h-300 h-557\">\r\n          <Image\r\n            src={nft.image}\r\n            objectFit=\"cover\"\r\n            className=\"rounded-xl shadow-lg \"\r\n            layout=\"fill\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"flex-1 justify-start sm:px-4 p-12 sm:pb-4\">\r\n        <div className=\"flex flex-row sm:flex-col\">\r\n          <h2 className=\"font-poppins dark:text-white text-nft-black-1 font-semibold text-2xl minlg:text-3xl\">\r\n            {nft.name}\r\n          </h2>\r\n        </div>\r\n        <div className=\"mt-10 \">\r\n          <p className=\"font-poppins dark:text-white text-nft-black-1 text-xs minlg:text-base font-normal \">\r\n            Creator\r\n          </p>\r\n          <div className=\"flex flex-row items-center mt-3\">\r\n            <div className=\"relative w-12 h-12 minlg:w-20 minlg:h-20 mr-2\">\r\n              <Image\r\n                src={images.creator1}\r\n                className=\"rounded-full\"\r\n                objectFit=\"cover\"\r\n              />\r\n            </div>\r\n            <p className=\"font-poppins dark:text-white text-nft-black-1 text-xs minlg:text-base font-semibold \">\r\n              {shortenAddress(nft.seller)}\r\n            </p>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"mt-10 flex flex-col\">\r\n          <div className=\"w-full border-b dark:border-nft-black-1 border-nft-gray-1 flex flex-row\">\r\n            <p className=\"font-poppins dark:text-white text-nft-black-1 text-base minlg:text-base font-medium mb-2\">\r\n              Details{' '}\r\n            </p>\r\n          </div>\r\n          <div className=\"mt-3\">\r\n            <p className=\"font-poppins dark:text-white text-nft-black-1 text-base font-normal\">\r\n              {nft.description}\r\n            </p>\r\n          </div>\r\n        </div>\r\n        <div className=\"flex flex-row sm:flex-col mt-10 \">\r\n          {currentAccount === nft.seller.toLowerCase() ? (\r\n            <p className=\"font-poppins dark:text-white text-nft-black-1 text-base font-normal border border-gray p-2\">\r\n              You Cannot Buy Your Own NFT\r\n            </p>\r\n          ) : currentAccount === nft.owner.toLowerCase() ? (\r\n            <Button\r\n              btnName=\"List on MarketPlace\"\r\n              classStyles=\"mr-5 sm:mr-0 sm:mb-5 rounded-xl\"\r\n              handleClick={() => router.push(\r\n                `/resell-nft?tokenId=${nft.tokenId}&tokenURI=${nft.tokenURI}`,\r\n              )}\r\n            />\r\n          ) : (\r\n            <Button\r\n              btnName={`Buy for ${nft.price} ${nftCurrency}`}\r\n              classStyles=\"mr-5 sm:mr-0 rounded-xl\"\r\n              handleClick={() => setPaymentModal(true)}\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n      {paymentModal && (\r\n        <Modal\r\n          header=\"Check Out\"\r\n          body={<PaymentBodyCmp nft={nft} nftCurrency={nftCurrency} />}\r\n          footer={(\r\n            <div className=\"flex flex-row sm:flex-col\">\r\n              <Button\r\n                btnName=\"Checkout\"\r\n                classStyles=\"mr-5 sm:mr-0 sm:mb-5 rounded-xl\"\r\n                handleClick={checkout}\r\n              />\r\n              <Button\r\n                btnName=\"Cancel\"\r\n                classStyles=\"mr-5 sm:mr-0 rounded-xl\"\r\n                handleClick={() => setPaymentModal(false)}\r\n              />\r\n            </div>\r\n          )}\r\n          handleClose={() => setPaymentModal(false)}\r\n        />\r\n      )}\r\n      {isLoadingNFT && (\r\n        <Modal\r\n          header=\"Buying NFT...\"\r\n          body={(\r\n            <div className=\"flexCenter flex-col text-center\">\r\n              <div className=\"relative w-52 h-52\">\r\n                <Loader />\r\n              </div>\r\n            </div>\r\n          )}\r\n          handleClose={() => setPaymentModal(false)}\r\n        />\r\n      )}\r\n      {successModal && (\r\n        <Modal\r\n          header=\"Payment Successfull\"\r\n          body={(\r\n            <div\r\n              className=\"flexCenter flex-col text-center\"\r\n              onClick={() => setSuccessModal(false)}\r\n            >\r\n              <div className=\"relative w-52 h-52\">\r\n                <Image\r\n                  src={nft.image || images[`nft${nft.i}`]}\r\n                  objectFit=\"cover\"\r\n                  layout=\"fill\"\r\n                />\r\n              </div>\r\n              <p className=\"font-poppins dark:text-white text-nft-black-1 text-sm minlg:text-xl font-normal mt-10\">\r\n                {' '}\r\n                You successfully purchased{' '}\r\n                <span className=\"font-semibold\">{nft.name}</span> from{' '}\r\n                <span className=\"font-semibold\">\r\n                  {shortenAddress(nft.seller)}\r\n                </span>\r\n                .\r\n              </p>\r\n            </div>\r\n          )}\r\n          footer={(\r\n            <div className=\"flexCenter flex-col\">\r\n              <Button\r\n                btnName=\"Check it out\"\r\n                classStyles=\"sm:mr-0 sm:mb-5 rounded-xl\"\r\n                handleClick={() => router.push('/my-nfts')}\r\n              />\r\n            </div>\r\n          )}\r\n          handleClose={() => setSuccessModal(false)}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NFTDetails;\r\n","C:\\Users\\dhira\\Desktop\\SUS\\pb08waleETHFORALL\\pages\\resell-nft.jsx",["122","123","124"],[],"import { useState, useEffect, useContext } from 'react';\r\nimport { useRouter } from 'next/router';\r\nimport axios from 'axios';\r\n\r\nimport { NFTContext } from '../context/NFTContext';\r\nimport { Loader, Button, Input } from '../components';\r\n\r\nconst ResellNFT = () => {\r\n  const { createSale, isLoadingNFT } = useContext(NFTContext);\r\n  const router = useRouter();\r\n  const { tokenId, tokenURI } = router.query;\r\n  const [price, setPrice] = useState('');\r\n  const [image, setImage] = useState('');\r\n\r\n  const fetchNFT = async () => {\r\n    if (!tokenURI) return;\r\n    const { data } = await axios.get(tokenURI);\r\n    setPrice(data.price);\r\n    setImage(data.image);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (tokenURI) {\r\n      fetchNFT();\r\n    }\r\n  }, [tokenURI]);\r\n\r\n  const resell = async () => {\r\n    await createSale(tokenURI, price, true, tokenId);\r\n\r\n    router.push('/');\r\n  };\r\n\r\n  if (isLoadingNFT) {\r\n    return (\r\n      <div className=\"flexStart min-h-screen\">\r\n        <Loader />\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div className=\"flex justify-center sm:px-4 p-12\">\r\n      <div className=\"w-3/5 md:w-full\">\r\n        <h1 className=\"font-poppins dark:text-white text-nft-black-1 font-semibold text-2xl\">Resell NFT</h1>\r\n\r\n        <Input\r\n          inputType=\"number\"\r\n          title=\"Price\"\r\n          placeholder=\"Asset Price\"\r\n          handleClick={(e) => setPrice(e.target.value)}\r\n        />\r\n\r\n        {image && <img className=\"rounded mt-4\" width=\"350\" src={image} />}\r\n\r\n        <div className=\"mt-7 w-full flex justify-end\">\r\n          <Button\r\n            btnName=\"List NFT\"\r\n            btnType=\"primary\"\r\n            classStyles=\"rounded-xl\"\r\n            handleClick={resell}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ResellNFT;\r\n","C:\\Users\\dhira\\Desktop\\SUS\\pb08waleETHFORALL\\pages\\_app.jsx",[],[],"C:\\Users\\dhira\\Desktop\\SUS\\pb08waleETHFORALL\\components\\Banner.jsx",[],[],"C:\\Users\\dhira\\Desktop\\SUS\\pb08waleETHFORALL\\components\\Button.jsx",[],[],"C:\\Users\\dhira\\Desktop\\SUS\\pb08waleETHFORALL\\components\\CreatorCard.jsx",[],[],"C:\\Users\\dhira\\Desktop\\SUS\\pb08waleETHFORALL\\components\\Footer.jsx",[],[],"C:\\Users\\dhira\\Desktop\\SUS\\pb08waleETHFORALL\\components\\index.js",[],[],"C:\\Users\\dhira\\Desktop\\SUS\\pb08waleETHFORALL\\components\\Input.jsx",[],[],"C:\\Users\\dhira\\Desktop\\SUS\\pb08waleETHFORALL\\components\\Loader.jsx",[],[],"C:\\Users\\dhira\\Desktop\\SUS\\pb08waleETHFORALL\\components\\Modal.jsx",["125"],[],"import { useRef } from 'react';\r\nimport Image from 'next/image';\r\nimport { useTheme } from 'next-themes';\r\n\r\nimport images from '../assets';\r\n\r\nconst Modal = ({ header, body, footer, handleClose }) => {\r\n  const modalRef = useRef(null);\r\n  const { theme } = useTheme();\r\n  const handleClickOutside = (e) => {\r\n    if (modalRef.current && !modalRef.current.contains(e.target)) {\r\n      handleClose();\r\n    }\r\n  };\r\n  return (\r\n    <div\r\n      onClick={handleClickOutside}\r\n      className=\"flexCenter fixed inset-0 z-10 bg-overlay-black animated fadeIn \"\r\n    >\r\n      <div ref={modalRef} className=\"w-2/5 md:w-11/12 minlg:w-2/4 dark:bg-nft-dark  bg-white flex flex-col rounded-lg\">\r\n        <div className=\"flex justify-end mt-4 mr-4 minlg:mt-6 minlg:mr-6\">\r\n          <div className=\"relative w-3 h-3 minlg:w-6 minlg:h-6 cursor-pointer\" onClick={handleClose}>\r\n            <Image src={images.cross} layout=\"fill\" className={theme === 'light' ? 'filter invert' : null} />\r\n          </div>\r\n\r\n        </div>\r\n        <div className=\"flexCenter w-full text-center p-4\">\r\n          <h2 className=\"font-poppins dark:text-white text-nft-black-1 font-normal text-2xl\">{header}</h2>\r\n        </div>\r\n        <div className=\"p-10 sm:px-4 border-t border-b dark:border-nft-black-3 border-nft-gray-1\">{body}</div>\r\n        <div className=\"flexCenter p-4\">\r\n          {footer}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","C:\\Users\\dhira\\Desktop\\SUS\\pb08waleETHFORALL\\components\\Navbar.jsx",["126","127","128"],[],"import { useState, useContext, useEffect } from 'react';\r\nimport { useRouter } from 'next/router';\r\nimport { useTheme } from 'next-themes';\r\nimport Image from 'next/image';\r\nimport Link from 'next/link';\r\n\r\nimport { NFTContext } from '../context/NFTContext';\r\nimport Button from './Button';\r\nimport images from '../assets';\r\n\r\nconst MenuItems = ({ isMobile, active, setActive, setIsOpen }) => {\r\n  const generateLink = (i) => {\r\n    switch (i) {\r\n      case 0:\r\n        return '/';\r\n      case 1:\r\n        return '/listed-nfts';\r\n      case 2:\r\n        return '/my-nfts';\r\n\r\n      default:\r\n        return '/';\r\n    }\r\n  };\r\n  return (\r\n    <ul\r\n      className={`list-none flexCenter flex-row ${\r\n        isMobile ? 'flex-col h-full' : undefined\r\n      }`}\r\n    >\r\n      {['Explore NFTs', 'Listed NFTs', 'My NFTs'].map((item, i) => (\r\n        <li\r\n          key={i}\r\n          onClick={() => {\r\n            setActive(item);\r\n            if (isMobile) setIsOpen(false);\r\n          }}\r\n          className={`flex flex-row items-center font-poppins text-base font-semibold dark:hover:text-white hover:text-nft-dark mx-3 ${\r\n            active === item\r\n              ? 'dark:text-white text-nft-black-1'\r\n              : 'dark:text-nft-gray-3 text-nft-gray-2'\r\n          }`}\r\n        >\r\n          <Link href={generateLink(i)}>{item}</Link>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\nconst ButtonGroup = ({ setActive, router, setIsOpen }) => {\r\n  const { connectWallet, currentAccount } = useContext(NFTContext);\r\n\r\n  return currentAccount ? (\r\n    <Button\r\n      btnName=\"Create\"\r\n      classStyles=\"mx-2 rounded-xl\"\r\n      handleClick={() => {\r\n        setActive('');\r\n        setIsOpen(false);\r\n        router.push('/create-nft');\r\n      }}\r\n    />\r\n  ) : (\r\n    <Button\r\n      btnName=\"Connect\"\r\n      classStyles=\"mx-2 rounded-xl\"\r\n      handleClick={connectWallet}\r\n    />\r\n  );\r\n};\r\n\r\nconst checkActive = (active, setActive, router) => {\r\n  switch (router.pathname) {\r\n    case '/':\r\n      if (active !== 'Explore NFTs') setActive('Explore NFTs');\r\n      break;\r\n    case '/listed-nfts':\r\n      if (active !== 'Listed NFTs') setActive('Listed NFTs');\r\n      break;\r\n    case '/my-nfts':\r\n      if (active !== 'My NFTs') setActive('My NFTs');\r\n      break;\r\n    case '/create-nft':\r\n      if (active !== '') setActive('');\r\n      break;\r\n    default:\r\n      setActive('');\r\n  }\r\n};\r\n\r\nconst Navbar = () => {\r\n  const { theme, setTheme } = useTheme();\r\n  const [active, setActive] = useState('Explore NFTs');\r\n  const router = useRouter();\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  useEffect(() => {\r\n    checkActive(active, setActive, router);\r\n  }, [router.pathname]);\r\n  return (\r\n    <nav className=\"flexBetween w-full fixed z-10 p-4 flex-row border-b dark:bg-nft-dark bg-white dark:border-nft-black-1 border-nft-gray-1\">\r\n      <div className=\"flex flex-1 flex-row justify-start\">\r\n        <Link href=\"/\">\r\n          <div\r\n            className=\"flexCenter md:hidden cursor-pointer\"\r\n            onClick={() => {\r\n              setActive('Explore NFTs');\r\n              setIsOpen(false);\r\n            }}\r\n          >\r\n            <Image\r\n              src={images.logo02}\r\n              objectFit=\"contain\"\r\n              width={32}\r\n              height={32}\r\n              alt=\"logo\"\r\n            />\r\n            <p className=\"dark:text-white text-nft-black-1 font-semibold text-lg ml-1\">\r\n              NFTGalaxy\r\n            </p>\r\n          </div>\r\n        </Link>\r\n        <Link href=\"/\">\r\n          <div\r\n            className=\"hidden md:flex cursor-pointer\"\r\n            onClick={() => {\r\n              setActive('Explore NFTs');\r\n              setIsOpen(false);\r\n            }}\r\n          >\r\n            <Image\r\n              src={images.logo02}\r\n              objectFit=\"contain\"\r\n              width={32}\r\n              height={32}\r\n              alt=\"logo\"\r\n            />\r\n          </div>\r\n        </Link>\r\n      </div>\r\n      <div className=\"flex flex-initial flex-row justify-end\">\r\n        <div className=\"flex items-center mr-2\">\r\n          <input\r\n            type=\"checkbox\"\r\n            name=\"checkbox\"\r\n            id=\"checkbox\"\r\n            className=\"checkbox\"\r\n            onChange={() => setTheme(theme === 'light' ? 'dark' : 'light')}\r\n          />\r\n          <label\r\n            htmlFor=\"checkbox\"\r\n            className=\"flexBetween w-8 h-4 bg-black rounded-2xl p-1 relative label\"\r\n          >\r\n            <i className=\"fas fa-sun\" />\r\n            <i className=\"fas fa-moon\" />\r\n            <div className=\"w-3 h-3 absolute bg-white rounded-full ball\" />\r\n          </label>\r\n        </div>\r\n        <div className=\"md:hidden flex\">\r\n          <MenuItems active={active} setActive={setActive} />\r\n          <div className=\"ml-4\">\r\n            <ButtonGroup\r\n              setActive={setActive}\r\n              router={router}\r\n              setIsOpen={setIsOpen}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"hidden md:flex ml-2\">\r\n        {isOpen ? (\r\n          <Image\r\n            src={images.cross}\r\n            objectFit=\"contain\"\r\n            width={20}\r\n            height={20}\r\n            alt=\"cross\"\r\n            onClick={() => {\r\n              setIsOpen(false);\r\n            }}\r\n            className={theme === 'light' ? 'filter invert' : undefined}\r\n          />\r\n        ) : (\r\n          <Image\r\n            src={images.menu}\r\n            objectFit=\"contain\"\r\n            width={25}\r\n            height={25}\r\n            alt=\"menu\"\r\n            onClick={() => {\r\n              setIsOpen(true);\r\n            }}\r\n            className={theme === 'light' ? 'filter invert' : undefined}\r\n          />\r\n        )}\r\n        {isOpen && (\r\n          <div className=\" fixed inset-0 top-65 dark:bg-nft-dark bg-white z-10 nav-h flex justify-between flex-col\">\r\n            <div className=\"flex-1 p-4\">\r\n              <MenuItems\r\n                active={active}\r\n                setActive={setActive}\r\n                isMobile\r\n                setIsOpen={setIsOpen}\r\n              />\r\n            </div>\r\n            <div className=\"p-4 border-t dark:border-nft-black-1 border-nft-gray-1\">\r\n              <ButtonGroup\r\n                setActive={setActive}\r\n                router={router}\r\n                setIsOpen={setIsOpen}\r\n              />\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","C:\\Users\\dhira\\Desktop\\SUS\\pb08waleETHFORALL\\components\\NFTCard.jsx",["129"],[],"import { useContext } from 'react';\r\nimport Image from 'next/image';\r\nimport Link from 'next/link';\r\nimport { NFTContext } from '../context/NFTContext';\r\n\r\nimport images from '../assets';\r\nimport { shortenAddress } from '../utils/shortenAddress';\r\n\r\nconst NFTCard = ({ nft, onProfilePage }) => {\r\n  const { nftCurrency } = useContext(NFTContext);\r\n  return (\r\n    <Link href={{ pathname: '/nft-details', query: nft }}>\r\n\r\n      <div className=\"flex-1 min-w-215 max-w-max xs:max-w-none sm:w-full sm:min-w-155 minmd:min-w-256 minlg:min-w-327 dark:bg-nft-black-3 bg-white rounded-2xl p-4 m-4 minlg:m-8 sm:my-2 sm:mx-2 cursor-pointer shadow-md\">\r\n        <div className=\"relative w-full h-52 sm:h-36 minmd:h-60 minlg:h-300 rounded-2xl overflow-hidden\">\r\n          <Image\r\n            src={nft.image || images[`nft${nft.i}`]}\r\n            layout=\"fill\"\r\n            objectFit=\"cover\"\r\n            alt={`nft-${nft.i}`}\r\n          />\r\n        </div>\r\n        <div className=\"mt-3 flex flex-col \">\r\n          <p className=\"font-poppins dark:text-white text-nft-black-1 font-semibold text-sm minlg:text-xl\">{nft.name}</p>\r\n          <div className=\"flexBetween mt-1 minlg:mt-3 flex-row xs:flex-col xs:items-start xs:mt-3\">\r\n            <p className=\"font-poppins dark:text-white text-nft-black-1 font-semibold text-xs minlg:text-lg\">{nft.price}\r\n              <span className=\"normal\">\r\n                {nftCurrency}\r\n              </span>\r\n            </p>\r\n            <p className=\"font-poppins dark:text-white text-nft-black-1 font-semibold text-xs minlg:text-lg\">{shortenAddress(onProfilePage ? nft.owner : nft.seller) }\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n    </Link>\r\n  );\r\n};\r\n\r\nexport default NFTCard;\r\n","C:\\Users\\dhira\\Desktop\\SUS\\pb08waleETHFORALL\\components\\SearchBar.jsx",["130"],[],"import { useState, useEffect } from 'react';\r\nimport Image from 'next/image';\r\nimport { useTheme } from 'next-themes';\r\n\r\nimport images from '../assets';\r\n\r\nconst SearchBar = ({ activeSelect, setActiveSelect, handleSearch, clearSearch }) => {\r\n  const [search, setSearch] = useState('');\r\n  const [toggle, setToggle] = useState(false);\r\n  const [debouncedSearch, setDebouncedSearch] = useState(search);\r\n  const { theme } = useTheme();\r\n\r\n  useEffect(() => {\r\n    const timer = setTimeout(() => setSearch(debouncedSearch), 1000);\r\n\r\n    return () => clearTimeout(timer);\r\n  }, [debouncedSearch]);\r\n\r\n  useEffect(() => {\r\n    if (search) {\r\n      handleSearch(search);\r\n    } else {\r\n      clearSearch();\r\n    }\r\n  }, [search]);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"flex-1 flexCenter dark:bg-nft-black-2 bg-white border dark:border-nft-black-2 border-nft-gray-2 py-3 px-4 rounded-md\">\r\n        <Image\r\n          src={images.search}\r\n          objectFit=\"contain\"\r\n          width={20}\r\n          height={20}\r\n          alt=\"search\"\r\n          className={theme === 'light' ? 'filter invert' : undefined}\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Search item here\"\r\n          className=\"dark:bg-nft-black-2 bg-white mx-4 w-full font-poppins dark:text-white text-nft-black-1 font-normal text-xs outline-none\"\r\n          onChange={(e) => setDebouncedSearch(e.target.value)}\r\n          value={debouncedSearch}\r\n        />\r\n      </div>\r\n\r\n      <div\r\n        onClick={() => setToggle(!toggle)}\r\n        className=\"relative flexBetween ml-4 sm:ml-0 sm:mt-2 min-w-190 cursor-pointer dark:bg-nft-black-2 bg-white border dark:border-nft-black-2 border-nft-gray-2 py-3 px-4 rounded-md\"\r\n      >\r\n        <p className=\"font-poppins dark:text-white text-nft-black-1 font-normal text-xs\">{activeSelect}</p>\r\n        <Image\r\n          src={images.arrow}\r\n          objectFit=\"contain\"\r\n          width={15}\r\n          height={15}\r\n          alt=\"arrow\"\r\n          className={theme === 'light' ? 'filter invert' : undefined}\r\n        />\r\n\r\n        {toggle && (\r\n          <div className=\"absolute top-full left-0 right-0 w-full mt-3 z-10 dark:bg-nft-black-2 bg-white border dark:border-nft-black-2 border-nft-gray-2 py-3 px-4 rounded-md\">\r\n            {['Recently added', 'Price (low to high)', 'Price (high to low)'].map((item) => (\r\n              <p\r\n                className=\"font-poppins dark:text-white text-nft-black-1 font-normal text-xs my-3 cursor-pointer\"\r\n                onClick={() => setActiveSelect(item)}\r\n                key={item}\r\n              >\r\n                {item}\r\n              </p>\r\n            ))}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SearchBar;\r\n",{"ruleId":"131","severity":1,"message":"132","line":3,"column":1,"nodeType":"133","endLine":9,"endColumn":3},{"ruleId":"134","severity":1,"message":"135","line":25,"column":6,"nodeType":"136","endLine":25,"endColumn":8,"suggestions":"137"},{"ruleId":"138","severity":1,"message":"139","line":78,"column":19,"nodeType":"140","endLine":78,"endColumn":57},{"ruleId":"134","severity":1,"message":"141","line":48,"column":6,"nodeType":"136","endLine":48,"endColumn":8,"suggestions":"142"},{"ruleId":"134","severity":1,"message":"143","line":66,"column":6,"nodeType":"136","endLine":66,"endColumn":20,"suggestions":"144"},{"ruleId":"134","severity":1,"message":"145","line":17,"column":6,"nodeType":"136","endLine":17,"endColumn":8,"suggestions":"146"},{"ruleId":"134","severity":1,"message":"145","line":23,"column":6,"nodeType":"136","endLine":23,"endColumn":8,"suggestions":"147"},{"ruleId":"134","severity":1,"message":"143","line":42,"column":6,"nodeType":"136","endLine":42,"endColumn":20,"suggestions":"148"},{"ruleId":"149","severity":1,"message":"150","line":79,"column":13,"nodeType":"140","endLine":79,"endColumn":100},{"ruleId":"149","severity":1,"message":"150","line":24,"column":11,"nodeType":"140","endLine":24,"endColumn":68},{"ruleId":"134","severity":1,"message":"151","line":71,"column":6,"nodeType":"136","endLine":71,"endColumn":22,"suggestions":"152"},{"ruleId":"149","severity":1,"message":"150","line":92,"column":11,"nodeType":"140","endLine":97,"endColumn":13},{"ruleId":"149","severity":1,"message":"150","line":113,"column":15,"nodeType":"140","endLine":117,"endColumn":17},{"ruleId":"149","severity":1,"message":"150","line":202,"column":17,"nodeType":"140","endLine":206,"endColumn":19},{"ruleId":"134","severity":1,"message":"153","line":26,"column":6,"nodeType":"136","endLine":26,"endColumn":16,"suggestions":"154"},{"ruleId":"138","severity":1,"message":"139","line":53,"column":19,"nodeType":"140","endLine":53,"endColumn":75},{"ruleId":"149","severity":1,"message":"155","line":53,"column":19,"nodeType":"140","endLine":53,"endColumn":75},{"ruleId":"149","severity":1,"message":"150","line":23,"column":13,"nodeType":"140","endLine":23,"endColumn":110},{"ruleId":"134","severity":1,"message":"156","line":99,"column":6,"nodeType":"136","endLine":99,"endColumn":23,"suggestions":"157"},{"ruleId":"158","severity":1,"message":"159","line":103,"column":9,"nodeType":"140","endLine":103,"endColumn":24},{"ruleId":"158","severity":1,"message":"159","line":123,"column":9,"nodeType":"140","endLine":123,"endColumn":24},{"ruleId":"158","severity":1,"message":"159","line":12,"column":5,"nodeType":"140","endLine":12,"endColumn":59},{"ruleId":"134","severity":1,"message":"160","line":25,"column":6,"nodeType":"136","endLine":25,"endColumn":14,"suggestions":"161"},"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'uploadToIPFS'. Either include it or remove the dependency array.","ArrayExpression",["162"],"@next/next/no-img-element","Do not use <img>. Use Image from 'next/image' instead. See: https://nextjs.org/docs/messages/no-img-element","JSXOpeningElement","React Hook useEffect has a missing dependency: 'fetchNFTs'. Either include it or remove the dependency array.",["163"],"React Hook useEffect has a missing dependency: 'nfts'. Either include it or remove the dependency array. You can also do a functional update 'setNfts(n => ...)' if you only need 'nfts' in the 'setNfts' call.",["164"],"React Hook useEffect has a missing dependency: 'fetchMyNFTsOrListedNFTs'. Either include it or remove the dependency array.",["165"],["166"],["167"],"jsx-a11y/alt-text","Image elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","React Hook useEffect has a missing dependency: 'router.query'. Either include it or remove the dependency array.",["168"],"React Hook useEffect has a missing dependency: 'fetchNFT'. Either include it or remove the dependency array.",["169"],"img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","React Hook useEffect has missing dependencies: 'active' and 'router'. Either include them or remove the dependency array.",["170"],"@next/next/link-passhref","passHref is missing. See: https://nextjs.org/docs/messages/link-passhref","React Hook useEffect has missing dependencies: 'clearSearch' and 'handleSearch'. Either include them or remove the dependency array. If 'handleSearch' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["171"],{"desc":"172","fix":"173"},{"desc":"174","fix":"175"},{"desc":"176","fix":"177"},{"desc":"178","fix":"179"},{"desc":"178","fix":"180"},{"desc":"176","fix":"181"},{"desc":"182","fix":"183"},{"desc":"184","fix":"185"},{"desc":"186","fix":"187"},{"desc":"188","fix":"189"},"Update the dependencies array to be: [uploadToIPFS]",{"range":"190","text":"191"},"Update the dependencies array to be: [fetchNFTs]",{"range":"192","text":"193"},"Update the dependencies array to be: [activeSelect, nfts]",{"range":"194","text":"195"},"Update the dependencies array to be: [fetchMyNFTsOrListedNFTs]",{"range":"196","text":"197"},{"range":"198","text":"197"},{"range":"199","text":"195"},"Update the dependencies array to be: [router.isReady, router.query]",{"range":"200","text":"201"},"Update the dependencies array to be: [fetchNFT, tokenURI]",{"range":"202","text":"203"},"Update the dependencies array to be: [active, router, router.pathname]",{"range":"204","text":"205"},"Update the dependencies array to be: [clearSearch, handleSearch, search]",{"range":"206","text":"207"},[870,872],"[uploadToIPFS]",[1596,1598],"[fetchNFTs]",[2101,2115],"[activeSelect, nfts]",[532,534],"[fetchMyNFTsOrListedNFTs]",[807,809],[1314,1328],[2580,2596],"[router.isReady, router.query]",[744,754],"[fetchNFT, tokenURI]",[2669,2686],"[active, router, router.pathname]",[717,725],"[clearSearch, handleSearch, search]"]